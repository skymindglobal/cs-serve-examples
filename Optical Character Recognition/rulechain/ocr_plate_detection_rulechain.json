{
  "ruleChain": {
    "additionalInfo": {
      "description": "test purposes for plate detection for ocr"
    },
    "name": "ocr_plate_detection",
    "type": "CORE",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": true,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 10,
    "nodes": [
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 839,
          "layoutY": 315
        },
        "type": "org.thingsboard.rule.engine.telemetry.TbMsgTimeseriesNode",
        "name": "save output",
        "debugMode": true,
        "configuration": {
          "defaultTTL": 0
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 527,
          "layoutY": 202
        },
        "type": "org.thingsboard.rule.engine.transform.TbModelNode",
        "name": "OCR",
        "debugMode": true,
        "configuration": {
          "resourceId": "18a548b0-480e-11ec-8394-87794cc5312b",
          "inputNames": [
            "input.1"
          ],
          "outputNames": [
            "306"
          ]
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 524,
          "layoutY": 115
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Post processing",
        "debugMode": true,
        "configuration": {
          "jsScript": "image = msg[\"image\"];\nbbox = msg[\"bbox\"];\nvar character = {1: '0', 2: '1', 3: '2', 4: '3', 5: '4', 6:'5', 7:'6', 8:'7', 9:'8', 10:'9', 11:'a', 12:'b', 13:'c', 14:'d', 15:'e', 16:'f', 17:'g', 18:'h', 19:'i', 20:'j', 21:'k', 22:'l', 23:'m', 24:'n', 25:'o', 26:'p', 27:'q', 28:'r', 29:'s', 30:'t', 31:'u', 32:'v', 33:'w', 34:'x', 35:'y', 36:'z', 37:'-'};\nvar output = msg[\"306\"];\noutput = nj.array(output);\nvar num_of_char = output.shape[1]/37;\noutput = output.reshape(num_of_char,1,37);\nvar data_output = [];\nvar  count = 0;\nfor (i=0;i<num_of_char;i++) {\n    var index = 0;\n    max = output.get(i,0,0);\n    \n    for (j=0;j<37;j++) {\n        \n        var check = output.get(i,0,j);\n        \n        if (max>=check) {\n            max = max;\n        }else {\n            max = check;\n            index = j;\n        }\n    }        \n    data_output[count] = index;\n    count++;\n}\nmsg.data_output =data_output;\nvar real_data = [];\nvar count2 = 0;\nfor (k=0;k<num_of_char;k++) {\n    if (data_output[k] != 0) {\n        if (k == 0) {\n            real_data[count2] = character[data_output[k]];\n            count2++;\n        }\n        if ((k > 0) && (data_output[k-1] != data_output[k])) {\n            real_data[count2] = character[data_output[k]];\n            count2++;\n        }\n    }\n}\n\nmsg.data_op = real_data;\nmsg.Word = real_data.join(\"\");\nmsg[\"Plate Registration\"] = real_data.join(\"\");\nmsg.bbox = bbox;\nmsg.image = image;\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 269,
          "layoutY": 304
        },
        "type": "org.thingsboard.rule.engine.transform.TbModelNode",
        "name": "plate_detection_model",
        "debugMode": true,
        "configuration": {
          "resourceId": "fcfc3510-7a67-11ec-b1b5-4b0dfa009355",
          "inputNames": [
            "input_1"
          ],
          "outputNames": [
            "Identity",
            "Identity_1"
          ]
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 530,
          "layoutY": 293
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "resize crop image",
        "debugMode": true,
        "configuration": {
          "jsScript": "//cropimage shape\nbbox = msg[\"bbox\"];\ncrop_image = msg[\"croppedImg\"];\ncrop_h = crop_image[0].length;\ncrop_w = crop_image[0][0].length;\n\nvar resize_crop = new Array(1);\nfor(var i=0;i<resize_crop.length;i++){\n    resize_crop[i] = new Array(32);       \n}\nfor(var j=0;j<resize_crop.length;j++){\n    for(var k=0;k<resize_crop[0].length;k++){\n        resize_crop[j][k] = new Array(100);       \n    }\n}\nfor(var l=0;l<resize_crop.length;l++){\n    for(var m=0;m<resize_crop[0].length;m++){\n        for(var n=0;n<resize_crop[0][0].length;n++){\n            resize_crop[l][m][n] = new Array(3);       \n        }      \n    }\n}\n\nfor(var e=0;e<resize_crop.length;e++){\n    for(var f=0;f<resize_crop[0].length;f++){\n        for(var g=0;g<resize_crop[0][0].length;g++){\n            for(var h=0;h<resize_crop[0][0][0].length;h++){\n                resize_crop[e][f][g][h] = 0;       \n            }      \n        }      \n    }\n}\n\n\nratio_h = parseInt(crop_h/32); //cannot be 0\nratio_w = parseInt(crop_w/100); //cannot be 0\n\nif(ratio_w==0){\n    ratio_w=1;\n}\nif(ratio_h==0){\n    ratio_h=1;\n}\n\nset_limit_a = -1;\nset_limit_b = -1;\ngetdata_a = false;\ngetdata_b = false;\nfor(var x=0;x<1;x++){\n    for(var a=0;a<crop_h;a++){ //a<38\n        if(a%ratio_h==0){   \n            set_limit_a = set_limit_a + 1; //38\n            getdata_a = true;\n        }\n        if(set_limit_a>-1 && getdata_a==true && set_limit_a<32){\n            \n            for(var b=0;b<crop_w;b++){  //80\n                if(b%ratio_w==0){\n                    set_limit_b = set_limit_b + 1; //111\n                    getdata_b=true;\n                }\n                if(set_limit_b>-1 && getdata_b==true && set_limit_b<100){\n                    \n                    for(var c=0;c<3;c++){\n                        resize_crop[x][set_limit_a][set_limit_b][c]= crop_image[x][a][b][c];  \n                    }\n                }\n                getdata_b = false;\n            }\n        }\n        set_limit_b = -1;\n        getdata_a = false;\n    }\n}\nmsg.resize_crop = resize_crop\n//rgb to grayscale\nflatten1 = [].concat.apply([], resize_crop);\nflatten2 = [].concat.apply([], flatten1);\nflatten3 = [].concat.apply([], flatten2);\n\ngrayscale_value = new Array(3200);\n\nsum=0\ncount=-1;\nfor(var s=0;s<3200;s++){\n    for(var t=0;t<3;t++){\n        count=count+1;\n        sum = sum + flatten3[count];\n    }\n    grayscale_value[s] = parseInt(sum/3)/255;\n    sum=0;\n}\nmsg.grayscale_value = grayscale_value;\ncrop2ocr = nj.array(grayscale_value);\nocr_size = crop2ocr.reshape(32, 100,1);\nocr_size = ocr_size.reshape(1,1, 32, 100);\n\nmsg[\"input.1\"] = ocr_size;\nmsg[\"bbox\"] = bbox;\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 552,
          "layoutY": 395
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "crop plate",
        "debugMode": true,
        "configuration": {
          "jsScript": "oriimage = msg[\"oriimage\"];\nbbox = msg[\"bbox\"];\nbox_coor = msg[\"box_coordinates\"];\n\n//real crop size\ndistX = box_coor[2] - box_coor[0]; //xmax-xmin\ndistY = box_coor[3] - box_coor[1]; //ymax-ymin\n\nvar crop = new Array(1);\nfor(var i=0;i<crop.length;i++){\n    crop[i] = new Array(distY);       \n}\nfor(var j=0;j<crop.length;j++){\n    for(var k=0;k<crop[0].length;k++){\n        crop[j][k] = new Array(distX);       \n    }\n}\nfor(var l=0;l<crop.length;l++){\n    for(var m=0;m<crop[0].length;m++){\n        for(var n=0;n<crop[0][0].length;n++){\n            crop[l][m][n] = new Array(3);       \n        }      \n    }\n}\n\ncount_a = -1;\ncount_b = -1;\nfor(var x=0;x<1;x++){\n    for(var a=box_coor[1];a<box_coor[3];a++){\n        count_a = count_a +1;\n        for(var b=box_coor[0];b<box_coor[2];b++){\n            count_b = count_b +1;\n            for(var c=0;c<3;c++){\n\n                crop[x][count_a][count_b][c] = oriimage[x][a][b][c];\n            }\n        }\n        count_b = -1;\n    }\n    count_a = -1;\n}\nmsg.bbox = bbox;\nmsg.croppedImg = crop;\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 279,
          "layoutY": 390
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "get_plate",
        "debugMode": true,
        "configuration": {
          "jsScript": "Identity_1 = msg[\"Identity_1\"];\nIdentity = msg[\"Identity\"];\noriimage = msg[\"oriimage\"];\nvar score_threshold = 0.25;\n//check score array and compare with threshold\nnew_score = [];\nboxes_idx = [];\ncount=-1\n\nfor(var i=0;i<Identity_1[0].length;i++){\n    if (Identity_1[0][i] >= score_threshold){\n        count = count + 1;\n        new_score[count] = Identity_1[0][i];\n        boxes_idx[count] = i;\n    }\n}\n\n//get highest score\nvar high_score = 0;\nvar high_score_box_idx = 0;\nfor(var j=0;j<new_score.length;j++){\n    if (new_score[j] > high_score){\n        high_score = new_score[j];\n        high_score_box_idx = boxes_idx[j];\n    }\n}\n//reshape box result (Identity)\nno_of_box = Identity[0].length/4;\nnew_box = new Array(no_of_box);\nfor(var k=0;k<no_of_box;k++){\n new_box[k] = new Array(4);       \n}\nx=-1;\nfor(var l=0;l<no_of_box;l++){\n    for(var m=0;m<4;m++){\n        x=x+1;\n        new_box[l][m] = msg.Identity[0][x];\n    }\n}\n//get plate bounding box\nvar plate_box = new_box[high_score_box_idx];\n//transform plate position\nvar box_yx = [plate_box[1],plate_box[0]];\nvar box_hw = [plate_box[3],plate_box[2]];\nbox_mins = [];\nbox_maxes = [];\nfor (var n=0;n<2;n++){\n    box_mins[n] = ((box_yx[n] - (box_hw[n] / 2.)) / 416); //416\n    box_maxes[n] = ((box_yx[n] + (box_hw[n] / 2.)) / 416); //416   \n}\n//concatenate box min & box max\nbounding_box = box_mins.concat(box_maxes);\nbox = [0,0,0,0];\n\nymin = parseInt(bounding_box[0]*416);\nxmin = parseInt(bounding_box[1]*416);\nymax = parseInt(bounding_box[2]*416);\nxmax = parseInt(bounding_box[3]*416);\n\nbox[0] = Math.abs(xmin);\nbox[1] = Math.abs(ymin); \nbox[2] = Math.abs(xmax);\nbox[3] = Math.abs(ymax);\nscore = high_score*100;\n\nmsg.oriimage = oriimage;\nmsg.box_coordinates = box;\nmsg.bbox = {\n    \"@x1\": bounding_box[1],\n    \"@y1\": bounding_box[0],\n    \"@x2\": bounding_box[3],\n    \"@y2\": bounding_box[2],\n    \"label\" : \"plate\",\n    \"probability\" : score\n};\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 274,
          "layoutY": 126
        },
        "type": "org.thingsboard.rule.engine.transform.TbImageToArrayNode",
        "name": "image2array",
        "debugMode": true,
        "configuration": {
          "inputNames": "image",
          "outputNames": "resize_image",
          "ndArrayType": "FLOAT",
          "width": 416,
          "height": 416,
          "includeMinibatchDim": true,
          "aspectRatioHandling": "STRETCH",
          "ndFormat": "CHANNELS_LAST",
          "ndChannelLayout": "RGB",
          "imageNormalizationType": "NONE",
          "listHandling": "NONE"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 279,
          "layoutY": 215
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "process resize image",
        "debugMode": true,
        "configuration": {
          "jsScript": "image_resize = msg[\"resize_image\"];\n//change element position in image resize\nvar image_resize2 = new Array(1);\nfor(var a=0;a<image_resize2.length;a++){\n    image_resize2[a] = new Array(416);       \n}\nfor(var b=0;b<image_resize2.length;b++){\n    for(var c=0;c<image_resize2[0].length;c++){\n        image_resize2[b][c] = new Array(416);       \n    }\n}\nfor(var d=0;d<image_resize2.length;d++){\n    for(var e=0;e<image_resize2[0].length;e++){\n        for(var f=0;f<image_resize2[0][0].length;f++){\n            image_resize2[d][e][f] = new Array(3);       \n        }      \n    }\n}\n\ninvert_c = 3;\nfor(var w=0;w<1;w++){\n    for(var x=0;x<416;x++){\n        for(var y=0;y<416;y++){\n            for(var z=0;z<3;z++){\n                invert_c = invert_c-1;\n                image_resize2[w][x][y][z] = image_resize [w][x][y][invert_c];\n            }\n            invert_c=3;\n        }\n    }\n}\n\nvar image_preprocess = new Array(1);\nfor(var i=0;i<image_preprocess.length;i++){\n    image_preprocess[i] = new Array(416);       \n}\nfor(var j=0;j<image_preprocess.length;j++){\n    for(var k=0;k<image_preprocess[0].length;k++){\n        image_preprocess[j][k] = new Array(416);       \n    }\n}\nfor(var l=0;l<image_preprocess.length;l++){\n    for(var m=0;m<image_preprocess[0].length;m++){\n        for(var n=0;n<image_preprocess[0][0].length;n++){\n            image_preprocess[l][m][n] = new Array(3);       \n        }      \n    }\n}\nfor(var i=0;i<3;i++){\n    for(var j=0;j<416;j++){\n        for(var k=0;k<416;k++){\n            for(var l=0;l<1;l++){\n                image_preprocess[l][k][j][i] = image_resize2[l][k][j][i]/255;                \n            }\n\n        }\n    }\n}\nmsg.oriimage = image_resize2;\nmsg.input_1 = image_preprocess;\nreturn {msg: msg, metadata: metadata, msgType: msgType};"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 824,
          "layoutY": 116
        },
        "type": "org.thingsboard.rule.engine.transform.TbDrawBoundingBoxesNode",
        "name": "bbox",
        "debugMode": true,
        "configuration": {
          "imageName": "image",
          "bboxName": "bbox",
          "drawLabel": false,
          "drawProbability": false,
          "classColors": {
            "plate": "red"
          },
          "color": "lime",
          "lineThickness": 2,
          "scale": "NONE",
          "resizeH": 100,
          "resizeW": 100,
          "drawCropRegion": false,
          "cropRegionColor": "purple",
          "ndArrayType": "FLOAT",
          "width": null,
          "height": null,
          "includeMinibatchDim": true,
          "aspectRatioHandling": "CENTER_CROP",
          "ndFormat": "CHANNELS_LAST",
          "ndChannelLayout": "RGB",
          "imageNormalizationType": "NONE",
          "listHandling": "NONE"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 50,
          "layoutY": 215
        },
        "type": "org.thingsboard.rule.engine.profile.TbDeviceProfileNode",
        "name": "input profile",
        "debugMode": true,
        "configuration": {
          "persistAlarmRulesState": false,
          "fetchAlarmRulesStateOnStart": false
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 50,
          "layoutY": 297
        },
        "type": "org.thingsboard.rule.engine.filter.TbMsgTypeSwitchNode",
        "name": "switch",
        "debugMode": true,
        "configuration": {
          "version": 0
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 1,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 9,
        "type": "Success"
      },
      {
        "fromIndex": 2,
        "toIndex": 0,
        "type": "Success"
      },
      {
        "fromIndex": 3,
        "toIndex": 6,
        "type": "Success"
      },
      {
        "fromIndex": 4,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 5,
        "toIndex": 4,
        "type": "Success"
      },
      {
        "fromIndex": 6,
        "toIndex": 5,
        "type": "Success"
      },
      {
        "fromIndex": 7,
        "toIndex": 8,
        "type": "Success"
      },
      {
        "fromIndex": 8,
        "toIndex": 3,
        "type": "Success"
      },
      {
        "fromIndex": 9,
        "toIndex": 0,
        "type": "Success"
      },
      {
        "fromIndex": 10,
        "toIndex": 11,
        "type": "Success"
      },
      {
        "fromIndex": 11,
        "toIndex": 7,
        "type": "Post telemetry"
      }
    ],
    "ruleChainConnections": null
  }
}